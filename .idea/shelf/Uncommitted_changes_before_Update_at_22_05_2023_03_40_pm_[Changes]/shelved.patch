Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># install Pyqt5 & Qt designer by \"pip install pyqt5\" , \"pip install pyqt5-tools\"\r\n\r\nimport sys\r\nimport time\r\nimport databaseSQL\r\nimport models\r\nfrom PyQt5.uic import loadUi\r\nfrom PyQt5 import QtWidgets, QtGui\r\nfrom PyQt5.QtWidgets import *\r\nfrom PyQt5.QtCore import Qt, QRegExp, QDate, QDateTime\r\nfrom PyQt5.QtGui import *\r\nfrom datetime import datetime\r\n\r\ndb = databaseSQL.database()\r\n\r\nloggedInUser = models.Account()\r\nselectedTrain = models.Train()\r\nselected = False\r\nselectedTrip = models.Trip()\r\n\r\nclass SplashScreen(QSplashScreen):\r\n    def __init__(self):\r\n        super(SplashScreen, self).__init__()\r\n        loadUi(\"ui/splash.ui\", self)\r\n        self.setWindowFlag(Qt.FramelessWindowHint)\r\n        pixMap = QPixmap(\"img/splash.png\")\r\n        self.setPixmap(pixMap)\r\n        self.show()\r\n        self.progress()\r\n\r\n    def progress(self):\r\n        for i in range(100):\r\n            time.sleep(0.01)\r\n            self.progressBar.setValue(i)\r\n\r\n\r\nclass MainScreen(QMainWindow):\r\n    def __init__(self):\r\n        super(MainScreen, self).__init__()\r\n        loadUi(\"ui/main.ui\", self)\r\n        self.login.clicked.connect(self.gotologin)\r\n        self.signup.clicked.connect(self.gotosignup)\r\n\r\n    def gotologin(self):\r\n        login = LoginScreen()\r\n        widget.addWidget(login)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n    def gotosignup(self):\r\n        signup = SignupScreen()\r\n        widget.addWidget(signup)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n\r\nclass LoginScreen(QDialog):\r\n    def __init__(self):\r\n        super(LoginScreen, self).__init__()\r\n        loadUi(\"ui/Login.ui\", self)\r\n        self.inputPassword.setEchoMode(QtWidgets.QLineEdit.Password)\r\n        self.loginButton.clicked.connect(self.loginfunction)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n\r\n    def validateLogin(self):\r\n        email = self.inputEmail.text()\r\n        password = self.inputPassword.text()\r\n        if len(email) == 0 or len(password) == 0:\r\n            self.error.setText(\"Please input email and password!\")\r\n            return False\r\n        else:\r\n            self.error.setText(\"\")\r\n            for row in db.selectAll(\"Account\", f\"email ='{email}' and password ='{password}'\"):\r\n                loggedInUser.account_id = row.account_id\r\n                loggedInUser.name = row.name\r\n                loggedInUser.email = row.email\r\n                loggedInUser.password = row.password\r\n                loggedInUser.phone_num = row.phone_num\r\n                loggedInUser.address = row.address\r\n                loggedInUser.date_of_birth = row.date_of_birth\r\n                loggedInUser.role = row.role\r\n                return True\r\n            return False\r\n\r\n    def loginfunction(self):\r\n        if self.validateLogin():\r\n            self.inputEmail.setText(\"\")\r\n            self.inputPassword.setText(\"\")\r\n            if loggedInUser.role == \"admin\":\r\n                admin = AdminOptionsScreen()\r\n                widget.addWidget(admin)\r\n                widget.setCurrentIndex(widget.currentIndex() + 1)\r\n            elif loggedInUser.role == \"customer\":\r\n                customer = UserOptionsScreen()\r\n                widget.addWidget(customer)\r\n                widget.setCurrentIndex(widget.currentIndex() + 1)\r\n        else:\r\n            if self.error.text() == \"\":\r\n                self.error.setText(\"Invalid email and password!\")\r\n\r\n\r\nclass SignupScreen(QDialog):\r\n    def __init__(self):\r\n        super(SignupScreen, self).__init__()\r\n        loadUi(\"ui/Signup.ui\", self)\r\n        self.inputPassword.setEchoMode(QtWidgets.QLineEdit.Password)\r\n        self.signupButton.clicked.connect(self.signupfunction)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        # restrictions for input fields\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n        intValidator = QtGui.QIntValidator()\r\n        self.inputName.setValidator(stringValidator)\r\n        self.inputNumber.setValidator(intValidator)\r\n\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n\r\n    def showMessageBox(self):\r\n        msg = QMessageBox()\r\n        msg.setWindowTitle(\"Success registration!\")\r\n        msg.setText(\"Signed up successfully!\")\r\n        msg.setIcon(QMessageBox.Information)\r\n        msg.exec_()\r\n\r\n    def uniqueEmail(self, mail):\r\n        unique = True\r\n        if db.count(\"Account\", f\"email ='{mail}'\") == 1:\r\n            unique = False\r\n        return unique\r\n\r\n    def signupfunction(self):\r\n        # reset error msg\r\n        self.error.setText(\"\")\r\n        self.emailError.setText(\"\")\r\n\r\n        name = self.inputName.text()\r\n        email = self.inputEmail.text()\r\n        password = self.inputPassword.text()\r\n        phoneNum = self.inputNumber.text()\r\n        dob = self.inputDob.text()\r\n        address = self.inputAddress.text()\r\n\r\n        if not self.uniqueEmail(email):\r\n            self.error.setText(\"\")\r\n            self.errorMsg.setText(\"\")\r\n            self.emailError.setText(\"An account is already registered with your email!\")\r\n        elif len(name) == 0 or len(email) == 0 or len(password) == 0 or len(phoneNum) == 0 or len(address) == 0:\r\n            self.error.setText(\"\")\r\n            self.emailError.setText(\"\")\r\n            self.errorMsg.setText(\"Please input all the required fields!\")\r\n        # see which is checked, then add it\r\n        elif self.adminRadioButton.isChecked():\r\n            self.showMessageBox()\r\n            acc = models.Admin()\r\n            acc.name = name\r\n            acc.email = email\r\n            acc.password = password\r\n            acc.phone_num = phoneNum\r\n            acc.date_of_birth = dob\r\n            acc.address = address\r\n            db.addRecord(acc)\r\n            self.returnPrevScreen()\r\n        elif self.customerRadioButton.isChecked():\r\n            self.showMessageBox()\r\n            acc = models.Customer()\r\n            acc.name = name\r\n            acc.email = email\r\n            acc.password = password\r\n            acc.phone_num = phoneNum\r\n            acc.date_of_birth = dob\r\n            acc.address = address\r\n            db.addRecord(acc)\r\n            self.returnPrevScreen()\r\n        else:\r\n            self.errorMsg.setText(\"\")\r\n            self.error.setText(\"Please choose a role!\")\r\n\r\n\r\nclass UpdateUserScreen(QDialog):\r\n    def __init__(self):\r\n        super(UpdateUserScreen, self).__init__()\r\n        loadUi(\"ui/UpdateUser.ui\", self)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.updateUserButton.clicked.connect(self.updateuserfunction)\r\n        self.loadUserInfo()\r\n        # restrictions for input fields\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n        intValidator = QtGui.QIntValidator()\r\n        self.inputName.setValidator(stringValidator)\r\n        self.inputNumber.setValidator(intValidator)\r\n        self.inputDob.setReadOnly(True)\r\n        self.inputEmail.setReadOnly(True)\r\n\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n\r\n    def showMessageBox(self):\r\n        msg = QMessageBox()\r\n        msg.setWindowTitle(\"Success changes!\")\r\n        msg.setText(\"Profile updated successfully!\")\r\n        msg.setIcon(QMessageBox.Information)\r\n        msg.exec_()\r\n\r\n    def loadUserInfo(self):\r\n        # extract the date\r\n        year = int(loggedInUser.date_of_birth[0:4])\r\n        month = int(loggedInUser.date_of_birth[5:7])\r\n        day = int(loggedInUser.date_of_birth[8:10])\r\n\r\n        self.inputDob.setDate(QDate(year, month, day))\r\n        self.inputName.setText(loggedInUser.name)\r\n        self.inputEmail.setText(loggedInUser.email)\r\n        self.inputPassword.setText(loggedInUser.password)\r\n        self.inputNumber.setText(loggedInUser.phone_num)\r\n        self.inputAddress.setText(loggedInUser.address)\r\n        if loggedInUser.role == \"admin\":\r\n            self.adminRadioButton.setChecked(True)\r\n        elif loggedInUser.role == \"customer\":\r\n            self.customerRadioButton.setChecked(True)\r\n\r\n        self.adminRadioButton.setEnabled(False)\r\n        self.customerRadioButton.setEnabled(False)\r\n\r\n    def updateuserfunction(self):\r\n        self.showMessageBox()\r\n        acc = models.Account()\r\n        acc.account_id = loggedInUser.account_id\r\n        acc.name = self.inputName.text()\r\n        acc.email = self.inputEmail.text()\r\n        acc.password = self.inputPassword.text()\r\n        acc.phone_num = self.inputNumber.text()\r\n        acc.date_of_birth = loggedInUser.date_of_birth\r\n        acc.address = self.inputAddress.text()\r\n        db.update(acc)\r\n        # update the current info of logged in user if updated\r\n        loggedInUser.name = acc.name\r\n        loggedInUser.email = acc.email\r\n        loggedInUser.password = acc.password\r\n        loggedInUser.phone_num = acc.phone_num\r\n        loggedInUser.address = acc.address\r\n        self.returnPrevScreen()\r\n\r\n\r\nclass AddTrainScreen(QDialog):\r\n    def __init__(self):\r\n        super(AddTrainScreen, self).__init__()\r\n        loadUi(\"ui/AddTrain.ui\", self)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.addTrainButton.clicked.connect(self.addtrainfunction)\r\n\r\n        intValidator = QtGui.QIntValidator()\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n        self.inputCapacity.setValidator(intValidator)\r\n        self.inputNumofcart.setValidator(intValidator)\r\n        self.inputManufacturer.setValidator(stringValidator)\r\n\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n\r\n    def showMessageBox(self):\r\n        msg = QMessageBox()\r\n        msg.setWindowTitle(\"Success addition!\")\r\n        msg.setText(\"Train added successfully!\")\r\n        msg.setIcon(QMessageBox.Information)\r\n        msg.exec_()\r\n\r\n    def addtrainfunction(self):\r\n        cap = self.inputCapacity.text()\r\n        numOfCart = self.inputNumofcart.text()\r\n        manufacture = self.inputManufacturer.text()\r\n        if len(cap) == 0 or len(numOfCart) == 0 or len(\r\n                manufacture) == 0 or (\r\n                not self.activeRadioButton.isChecked() and not self.inactiveRadioButton.isChecked()):\r\n            self.error.setText(\"Please input all the required fields!\")\r\n        else:\r\n            self.showMessageBox()\r\n            train = models.Train()\r\n            train.capacity = int(cap)\r\n            train.no_of_cart = int(numOfCart)\r\n            train.manufacture = manufacture\r\n            if self.activeRadioButton.isChecked():\r\n                train.status = \"active\"\r\n            elif self.inactiveRadioButton.isChecked():\r\n                train.status = \"inactive\"\r\n            db.addRecord(train)\r\n            self.returnPrevScreen()\r\n\r\n\r\nclass ShowAllTrains(QDialog):\r\n    def __init__(self):\r\n        super(ShowAllTrains, self).__init__()\r\n        loadUi(\"ui/ShowTrains.ui\", self)\r\n        self.tableWidget.setColumnWidth(0, 100)\r\n        self.tableWidget.setColumnWidth(1, 100)\r\n        self.tableWidget.setColumnWidth(2, 100)\r\n        self.tableWidget.setColumnWidth(3, 150)\r\n        self.tableWidget.setColumnWidth(4, 200)\r\n        self.tableWidget.setHorizontalHeaderLabels([\"Train ID\", \"Capacity\", \"Status\", \"Number of cart\", \"Manufacturer\"])\r\n        self.tableWidget.setSelectionBehavior(QTableView.SelectRows)\r\n        self.loadTrains()\r\n        self.selectTrainButton.clicked.connect(self.gotoupdatetrain)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.tableWidget.cellClicked.connect(self.getClickedCell)\r\n\r\n    def clearSelected(self):\r\n        global selected\r\n        selected = False\r\n        # reset the selected train data to none\r\n        selectedTrain.train_id = \"\"\r\n        selectedTrain.status = \"\"\r\n        selectedTrain.capacity = \"\"\r\n        selectedTrain.manufacture = \"\"\r\n        selectedTrain.no_of_cart = \"\"\r\n\r\n    def getClickedCell(self, row):\r\n        global selected\r\n        selected = True\r\n        # move the clicked row data to update train screen\r\n        selectedTrain.train_id = self.tableWidget.item(row, 0).text()\r\n        selectedTrain.capacity = self.tableWidget.item(row, 1).text()\r\n        selectedTrain.status = self.tableWidget.item(row, 2).text()\r\n        selectedTrain.no_of_cart = self.tableWidget.item(row, 3).text()\r\n        selectedTrain.manufacture = self.tableWidget.item(row, 4).text()\r\n\r\n    def returnPrevScreen(self):\r\n        self.clearSelected()\r\n        widget.removeWidget(self)\r\n\r\n    def loadTrains(self):\r\n        self.tableWidget.setRowCount(db.count(\"Train\"))\r\n        tableRow = 0\r\n        for row in db.selectAll(\"Train\"):\r\n            self.tableWidget.setItem(tableRow, 0, QtWidgets.QTableWidgetItem(str(row.train_id)))\r\n            self.tableWidget.setItem(tableRow, 1, QtWidgets.QTableWidgetItem(str(row.capacity)))\r\n            self.tableWidget.setItem(tableRow, 2, QtWidgets.QTableWidgetItem(row.status))\r\n            self.tableWidget.setItem(tableRow, 3, QtWidgets.QTableWidgetItem(str(row.no_of_cart)))\r\n            self.tableWidget.setItem(tableRow, 4, QtWidgets.QTableWidgetItem(row.manufacture))\r\n            tableRow += 1\r\n\r\n    def gotoupdatetrain(self):\r\n        if selected:\r\n            self.error.setText(\"\")\r\n            updateTrain = UpdateTrainScreen()\r\n            widget.addWidget(updateTrain)\r\n            widget.setCurrentIndex(widget.currentIndex() + 1)\r\n        else:\r\n            self.error.setText(\"Please select a train to update!\")\r\n\r\n\r\nclass UpdateTrainScreen(QDialog):\r\n    def __init__(self):\r\n        super(UpdateTrainScreen, self).__init__()\r\n        loadUi(\"ui/UpdateTrain.ui\", self)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.updateTrainButton.clicked.connect(self.updatetrainfunction)\r\n        self.loadTrainInfo()\r\n        intValidator = QtGui.QIntValidator()\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n        self.inputCapacity.setValidator(intValidator)\r\n        self.inputNumofcart.setValidator(intValidator)\r\n        self.inputManufacturer.setValidator(stringValidator)\r\n        self.inputCapacity.setReadOnly(True)\r\n\r\n    def showMessageBox(self):\r\n        msg = QMessageBox()\r\n        msg.setWindowTitle(\"Success changes!\")\r\n        msg.setText(\"Train updated successfully!\")\r\n        msg.setIcon(QMessageBox.Information)\r\n        msg.exec_()\r\n\r\n    def clearSelected(self):\r\n        global selected\r\n        selected = False\r\n        # reset the selected train data to none\r\n        selectedTrain.train_id = \"\"\r\n        selectedTrain.status = \"\"\r\n        selectedTrain.capacity = \"\"\r\n        selectedTrain.manufacture = \"\"\r\n        selectedTrain.no_of_cart = \"\"\r\n\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n\r\n    def loadTrainInfo(self):\r\n        self.inputCapacity.setText(selectedTrain.capacity)\r\n        self.inputNumofcart.setText(selectedTrain.no_of_cart)\r\n        self.inputManufacturer.setText(selectedTrain.manufacture)\r\n        if selectedTrain.status == \"active\":\r\n            self.activeRadioButton.setChecked(True)\r\n        elif selectedTrain.status == \"inactive\":\r\n            self.inactiveRadioButton.setChecked(True)\r\n\r\n    def updatetrainfunction(self):\r\n        cap = self.inputCapacity.text()\r\n        numOfCart = self.inputNumofcart.text()\r\n        manufacture = self.inputManufacturer.text()\r\n        if len(cap) == 0 or len(numOfCart) == 0 or len(\r\n                manufacture) == 0 or (\r\n                not self.activeRadioButton.isChecked() and not self.inactiveRadioButton.isChecked()):\r\n            self.error.setText(\"Cannot update without the required fields!\")\r\n        else:\r\n            self.showMessageBox()\r\n            selectedTrain.capacity = cap\r\n            selectedTrain.no_of_cart = numOfCart\r\n            selectedTrain.manufacture = manufacture\r\n            if self.activeRadioButton.isChecked():\r\n                selectedTrain.status = \"active\"\r\n            elif self.inactiveRadioButton.isChecked():\r\n                selectedTrain.status = \"inactive\"\r\n            # update the selected train data\r\n            db.update(selectedTrain)\r\n            self.returnPrevScreen()\r\n            self.clearSelected()\r\n            widget.removeWidget(widget.currentWidget())\r\n\r\n\r\n# -------------------------------------------------------\r\n# Shahd - Screens\r\nclass AddTripScreen(QDialog):\r\n    def __init__(self):\r\n        super(AddTripScreen, self).__init__()\r\n        # load UI\r\n        loadUi(\"ui/AddTrip.ui\", self)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.addTripButton.clicked.connect(self.addtripfunction)\r\n\r\n        intValidator = QtGui.QIntValidator()\r\n        floatValidator = QtGui.QDoubleValidator()\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n        self.inputPrice.setValidator(floatValidator)\r\n        self.inputDepartureStation.setValidator(stringValidator)\r\n        self.inputArrivalStation.setValidator(stringValidator)\r\n        self.inputTrainID.setValidator(intValidator)\r\n    def showMessageBox(self):\r\n        msg = QMessageBox()\r\n        msg.setWindowTitle(\"Success changes!\")\r\n        msg.setText(\"Trip added successfully!\")\r\n        msg.setIcon(QMessageBox.Information)\r\n        msg.exec_()\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n    def addtripfunction(self):\r\n        price = float(self.inputPrice.text())\r\n        departure = self.inputDepartureStation.text()\r\n        arrival = self.inputArrivalStation.text()\r\n        trainID = self.inputTrainID.text()\r\n        startdate = self.inputStartDate.dateTime().toPyDateTime()\r\n        enddate = self.inputEndDate.dateTime().toPyDateTime()\r\n        train = db.selectAll(\"Train\" , f\"train_id = '{trainID}'\")[0]\r\n        if len(str(price)) == 0 or len(departure) == 0 or len(arrival) == 0 or len(trainID) == 0:\r\n            self.error.setText(\"Cannot add without the required fields!\")\r\n        #check train id exist\r\n        elif train is None:\r\n            self.error.setText(\"Train ID doesn't exist!\")\r\n        elif startdate >= enddate:\r\n            self.error.setText(\"Start date must be before end date!\")\r\n        else:\r\n            trip = models.Trip()\r\n            trip.train = train\r\n            trip.price = price\r\n            trip.departure_station = departure\r\n            trip.arrival_station = arrival\r\n            trip.start_date = startdate\r\n            trip.end_date = enddate\r\n            db.addRecord(trip)\r\n            self.showMessageBox()\r\n            widget.removeWidget(widget.currentWidget())\r\n\r\n\r\nclass UpdateTripScreen(QDialog):\r\n    def __init__(self):\r\n        super(UpdateTripScreen, self).__init__()\r\n        loadUi(\"ui/UpdateTrip.ui\", self)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.updateTripButton.clicked.connect(self.updatetripfunction)\r\n        self.loadTripInfo()\r\n        intValidator = QtGui.QIntValidator()\r\n        floatValidator = QtGui.QDoubleValidator()\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n        self.inputPrice.setValidator(floatValidator)\r\n        self.inputDepartureStation.setValidator(stringValidator)\r\n        self.inputArrivalStation.setValidator(stringValidator)\r\n        self.inputTrainID.setValidator(intValidator)\r\n\r\n    def showMessageBox(self):\r\n        msg = QMessageBox()\r\n        msg.setWindowTitle(\"Success changes!\")\r\n        msg.setText(\"Trip updated successfully!\")\r\n        msg.setIcon(QMessageBox.Information)\r\n        msg.exec_()\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n    def loadTripInfo(self):\r\n        self.inputPrice.setText(str(selectedTrip.price))\r\n        self.inputDepartureStation.setText(selectedTrip.departure_station)\r\n        self.inputArrivalStation.setText(selectedTrip.arrival_station)\r\n        self.inputTrainID.setText(str(selectedTrip.train.train_id))\r\n        self.inputStartDate.setDateTime(QDateTime.fromString(selectedTrip.start_date))\r\n        self.inputEndDate.setDateTime(QDateTime.fromString(selectedTrip.end_date))\r\n    def updatetripfunction(self):\r\n        price = float(self.inputPrice.text())\r\n        departure = self.inputDepartureStation.text()\r\n        arrival = self.inputArrivalStation.text()\r\n        trainID = self.inputTrainID.text()\r\n        startdate = self.inputStartDate.dateTime().toPyDateTime()\r\n        enddate = self.inputEndDate.dateTime().toPyDateTime()\r\n        train = db.selectAll(\"Train\" , f\"train_id = '{trainID}'\")[0]\r\n\r\n        if  len(departure) == 0 or len(arrival) == 0 or len(trainID) == 0 or len(str(price)) == 0:\r\n            self.error.setText(\"Cannot update without the required fields!\")\r\n        #check train id exist\r\n        elif train is None:\r\n            self.error.setText(\"Train ID doesn't exist!\")\r\n        elif startdate >= enddate:\r\n            self.error.setText(\"Start date must be before end date!\")\r\n        else:\r\n            selectedTrip.price = price\r\n            selectedTrip.departure_station = departure\r\n            selectedTrip.arrival_station = arrival\r\n            selectedTrip.train = train\r\n            selectedTrip.start_date = startdate\r\n            selectedTrip.end_date = enddate\r\n            db.update(selectedTrip)\r\n            self.showMessageBox()\r\n            widget.removeWidget(widget.currentWidget())\r\n\r\nclass ShowAllTrips(QDialog):\r\n    def __init__(self):\r\n        super(ShowAllTrips, self).__init__()\r\n        # load UI\r\n        loadUi(\"ui/ShowTrips.ui\", self)\r\n        #make coulmn width fit the content\r\n        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)\r\n        self.tableWidget.setHorizontalHeaderLabels([\"Trip Id\",\"Departure Station\", \"Arrival Station\", \"Price\", \"Start Date\", \"End Date\", \"Train ID\"])\r\n        self.tableWidget.setSelectionBehavior(QTableView.SelectRows)\r\n        self.loadTrips()\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.tableWidget.doubleClicked.connect(self.getClickedCell)\r\n\r\n    def getClickedCell(self, index):\r\n        row = index.row()\r\n        column = index.column()\r\n\r\n        if column >= 0:\r\n            selectedTrip.trip_id = self.tableWidget.item(row, 0).text()\r\n            selectedTrip.departure_station = self.tableWidget.item(row, 1).text()\r\n            selectedTrip.arrival_station = self.tableWidget.item(row, 2).text()\r\n            # print(self.tableWidget.item(row, 3).text())\r\n            selectedTrip.price = float(self.tableWidget.item(row, 3).text())\r\n            selectedTrip.start_date = self.tableWidget.item(row, 4).text()\r\n            selectedTrip.end_date = self.tableWidget.item(row, 5).text()\r\n            trainid = int(self.tableWidget.item(row, 6).text())\r\n            selectedTrip.train = db.selectAll(\"Train\", f\"train_id = '{trainid}'\")[0]\r\n            self.action()\r\n\r\n    def clearSelected(self):\r\n        # reset the selected train data to none\r\n        selectedTrip.departure_station = \"\"\r\n        selectedTrip.arrival_station = \"\"\r\n        selectedTrip.price = \"\"\r\n        selectedTrip.start_date = \"\"\r\n        selectedTrip.end_date = \"\"\r\n        selectedTrip.train = None\r\n    def returnPrevScreen(self):\r\n        self.clearSelected()\r\n        widget.removeWidget(self)\r\n\r\n    def loadTrips(self):\r\n        self.tableWidget.setRowCount(db.count(\"Trip\"))\r\n        tableRow = 0\r\n        for row in db.selectAll(\"Trip\"):\r\n            self.tableWidget.setItem(tableRow, 0, QtWidgets.QTableWidgetItem(str(row.trip_id)))\r\n            self.tableWidget.setItem(tableRow, 1, QtWidgets.QTableWidgetItem(row.departure_station))\r\n            self.tableWidget.setItem(tableRow, 2, QtWidgets.QTableWidgetItem(row.arrival_station))\r\n            self.tableWidget.setItem(tableRow, 3, QtWidgets.QTableWidgetItem(str(row.price)))\r\n            self.tableWidget.setItem(tableRow, 4, QtWidgets.QTableWidgetItem(str(row.start_date)))\r\n            self.tableWidget.setItem(tableRow, 5, QtWidgets.QTableWidgetItem(str(row.end_date)))\r\n            self.tableWidget.setItem(tableRow, 6, QtWidgets.QTableWidgetItem(str(row.train.train_id)))\r\n            tableRow += 1\r\n\r\n    def action(self):\r\n        if loggedInUser.role == \"admin\":\r\n            widget.addWidget(UpdateTripScreen())\r\n            widget.setCurrentIndex(widget.currentIndex() + 1)\r\n        else:\r\n            widget.addWidget(BookTripScreen())\r\n            widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\nclass BookTripScreen(QDialog):\r\n    def __init__(self):\r\n        super(BookTripScreen, self).__init__()\r\n        loadUi(\"ui/BookTrip.ui\", self)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.bookTripButton.clicked.connect(self.booktripfunction)\r\n        self.loadTripInfo()\r\n        intValidator = QtGui.QIntValidator()\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n\r\n    def clearSelected(self):\r\n        # reset the selected train data to none\r\n        selectedTrip.trip_id = \"\"\r\n        selectedTrip.departure_station = \"\"\r\n        selectedTrip.arrival_station = \"\"\r\n        selectedTrip.price = \"\"\r\n        selectedTrip.start_date = \"\"\r\n        selectedTrip.end_date = \"\"\r\n    def returnPrevScreen(self):\r\n        self.clearSelected()\r\n        widget.removeWidget(self)\r\n    def loadTripInfo(self):\r\n        self.departureStationLabel.setText(selectedTrip.departure_station)\r\n        self.arrivalStationLabel.setText(selectedTrip.arrival_station)\r\n        self.startDateLabel.setText(selectedTrip.start_date)\r\n        self.endDateLabel.setText(selectedTrip.end_date)\r\n        self.totalPriceLabel.setText(str(selectedTrip.price))\r\n    #     self.seatCountInput.textChanged.connect(self.updateTotalPrice)\r\n    # def updateTotalPrice(self):\r\n    #     numofseats = self.seatCountInput.text()\r\n    #     if len(numofseats) == 0:\r\n    #         self.totalPriceLabel.setText(\"0\")\r\n    #     else:\r\n    #         self.totalPriceLabel.setText(str(int(numofseats) * int(selectedTrip.price)))\r\n    def showMessageBox(self):\r\n        msg = QMessageBox()\r\n        msg.setWindowTitle(\"Success Booking!\")\r\n        msg.setText(\"Successfully booked the trip!\")\r\n        msg.setIcon(QMessageBox.Information)\r\n        msg.exec_()\r\n    def booktripfunction(self):\r\n        numofseats = self.seatCountInput.text()\r\n\r\n        # if int(numofseats) > db.count(\"Seat\",f\"status = 'available' and trip_id = '{selectedTrip.trip_id}';\"):\r\n        #     self.error.setText(\"\")\r\n        #     self.errorMsg.setText(\"\")\r\n        #     self.errorMsg.setText(\"Not enough seats!\")\r\n        # else:\r\n        book = models.Booking()\r\n        book.trip = selectedTrip\r\n        book.account = loggedInUser\r\n        book.set_seats_num(int(numofseats))\r\n        db.addRecord(book)\r\n        self.showMessageBox()\r\n        self.returnPrevScreen()\r\n        self.clearSelected()\r\n\r\nclass CancelTripScreen(QDialog):\r\n    def __init__(self):\r\n        super(CancelTripScreen, self).__init__()\r\n        # load UI\r\n\r\nclass ShowMatchingTripsScreen(QDialog):\r\n    def __init__(self):\r\n        super(ShowMatchingTripsScreen, self).__init__()\r\n        # load UI\r\n        loadUi(\"ui/ShowTrips.ui\", self)\r\n        model = QStandardItemModel(0, 5)\r\n        model.setHorizontalHeaderLabels(\r\n            [\"Departure Station\", \"Arrival Station\", \"Price\", \"Start Date\", \"End Date\"])\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.tableWidget.setSelectionBehavior(QTableView.SelectRows)\r\n        self.loadTrips()\r\n        self.selectTripButton.clicked.connect(self.gotobooktrip)\r\n        self.tableWidget.cellClicked.connect(self.getClickedCell)\r\n\r\n    def clearSelected(self):\r\n        # reset the selected trip data to none\r\n        selectedTrip.departure_station = \"\"\r\n        selectedTrip.arrival_station = \"\"\r\n        selectedTrip.price = \"\"\r\n        selectedTrip.start_date = \"\"\r\n        selectedTrip.end_date = \"\"\r\n\r\n    def returnPrevScreen(self):\r\n        self.clearSelected()\r\n        widget.removeWidget(self)\r\n\r\n    def loadTrips(self, departure_station, arrival_station, departure_date, seats_count):\r\n        model = QStandardItemModel(0, 5)\r\n        model.setHorizontalHeaderLabels(\r\n            [\"Departure Station\", \"Arrival Station\", \"Price\", \"Start Date\", \"End Date\"])\r\n        for i in db.selectAll(\"Trip\",where=\"departure_station = ? AND arrival_station = ? AND start_date = ? AND capacity >= ?\",where_values=[departure_station,arrival_station,departure_date,seats_count]):\r\n            departure_station = QStandardItem(str(i.departure_station))\r\n            arrival_station = QStandardItem(str(i.arrival_station))\r\n            price = QStandardItem(str(i.price))\r\n            start_date = QStandardItem(str(i.start_date))\r\n            end_date = QStandardItem(str(i.end_date))\r\n\r\n            model.appendRow([departure_station, arrival_station, price, start_date, end_date])\r\n\r\n    def getClickedCell(self, row, column):\r\n        # Retrieve the data from the clicked cell\r\n        trip_id = self.tableWidget.item(row, 0).text()\r\n        departure_station = self.tableWidget.item(row, 1).text()\r\n        arrival_station = self.tableWidget.item(row, 2).text()\r\n        price = self.tableWidget.item(row, 3).text()\r\n        start_date = self.tableWidget.item(row, 4).text()\r\n        end_date = self.tableWidget.item(row, 5).text()\r\n\r\n        # Set the selected trip data\r\n        selectedTrip.departure_station = departure_station\r\n        selectedTrip.arrival_station = arrival_station\r\n        selectedTrip.price = price\r\n        selectedTrip.start_date = start_date\r\n        selectedTrip.end_date = end_date\r\n\r\n    def gotobooktrip(self):\r\n        # Check if a trip is selected\r\n        if (\r\n            selectedTrip.departure_station\r\n            and selectedTrip.arrival_station\r\n            and selectedTrip.price\r\n            and selectedTrip.start_date\r\n            and selectedTrip.end_date\r\n        ):\r\n            # Open the BookSeatsScreen and pass the selected trip data\r\n            book_seats_screen = BookTripScreen()\r\n            book_seats_screen.departure_station_label.setText(selectedTrip.departure_station)\r\n            book_seats_screen.arrival_station_label.setText(selectedTrip.arrival_station)\r\n            book_seats_screen.price_label.setText(selectedTrip.price)\r\n            book_seats_screen.start_date_label.setText(selectedTrip.start_date)\r\n            book_seats_screen.end_date_label.setText(selectedTrip.end_date)\r\n            widget.addWidget(book_seats_screen)\r\n            widget.setCurrentIndex(widget.currentIndex() + 1)\r\n        else:\r\n            QMessageBox.warning(self, \"Warning\", \"Please select a trip.\")\r\n\r\nclass FindTripScreen(QDialog):\r\n    def __init__(self):\r\n        super(FindTripScreen, self).__init__()\r\n        # load UI\r\n        loadUi(\"ui/FindTrip.ui\", self)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n        self.findTripButton.clicked.connect(self.findtripfunction)\r\n        self.loadTripInfo()\r\n        intValidator = QtGui.QIntValidator()\r\n        txtRegex = QRegExp(\"[a-zA-Z]+\")\r\n        dateTimeRegex = QRegExp(\"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]\")\r\n        stringValidator = QRegExpValidator(txtRegex)\r\n        self.inputDepartureStation.setValidator(stringValidator)\r\n        self.inputArrivalStation.setValidator(stringValidator)\r\n\r\n\r\n    def clearSelected(self):\r\n        # reset the selected trip data to none\r\n        selectedTrip.departure_station = \"\"\r\n        selectedTrip.arrival_station = \"\"\r\n        selectedTrip.price = \"\"\r\n        selectedTrip.start_date = \"\"\r\n        selectedTrip.end_date = \"\"\r\n\r\n    def returnPrevScreen(self):\r\n        self.clearSelected()\r\n        widget.removeWidget(self)\r\n\r\n    def loadTripInfo(self):\r\n        self.inputDepartureStation.setText(selectedTrip.departure_station)\r\n        self.inputArrivalStation.setText(selectedTrip.arrival_station)\r\n        self.inputDateTime.setDateTime(QDateTime.fromString(selectedTrip.start_date, \"yyyy-MM-dd HH:mm\"))\r\n\r\n    def findtripfunction(self):\r\n        departure_station = self.inputDepartureStation.text()\r\n        arrival_station = self.inputArrivalStation.text()\r\n        departure_date = self.inputDateTime.text()\r\n        seats_count = self.inputSeatsCount.text()\r\n        # if len(departure_station) == 0 or len(arrival_station) == 0 or len(departure_date) == 0 or len(seats_count) == 0:\r\n        #     QMessageBox.warning(self, \"Warning\", \"Please fill in all the fields.\")\r\n        # else:\r\n        show_matching_trips_screen = ShowMatchingTripsScreen()\r\n        show_matching_trips_screen.loadTrips(\r\n            departure_station, arrival_station, departure_date, seats_count)\r\n        ShowMatchingTripsScreen.loadTrips(departure_station, arrival_station, departure_date, seats_count)\r\n        widget.addWidget(ShowMatchingTripsScreen)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n\r\n\r\n\r\n\r\nclass AdminOptionsScreen(QDialog):\r\n    def __init__(self):\r\n        super(AdminOptionsScreen, self).__init__()\r\n        loadUi(\"ui/adminOptions.ui\", self)\r\n        self.addTrainButton.clicked.connect(self.gotoaddtrain)\r\n        self.updateTrainButton.clicked.connect(self.gotoshowtrains)\r\n        self.addTripButton.clicked.connect(self.gotoaddtrip)\r\n        self.updateTripButton.clicked.connect(self.gotoshowtrips)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n\r\n    def gotoaddtrain(self):\r\n        addTrain = AddTrainScreen()\r\n        widget.addWidget(addTrain)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n    def gotoaddtrip(self):\r\n        addTrip = AddTripScreen()\r\n        widget.addWidget(addTrip)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n    def gotoshowtrips(self):\r\n        showTrips = ShowAllTrips()\r\n        widget.addWidget(showTrips)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n    def gotoshowtrains(self):\r\n        showTrains = ShowAllTrains()\r\n        widget.addWidget(showTrains)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n\r\nclass UserOptionsScreen(QDialog):\r\n    def __init__(self):\r\n        super(UserOptionsScreen, self).__init__()\r\n        loadUi(\"ui/userOptions.ui\", self)\r\n        self.updateInfoButton.clicked.connect(self.gotoupdateInfo)\r\n        self.bookButton.clicked.connect(self.gotobooktrip)\r\n        # self.cancelButton.clicked.connect(self.gotocanceltrip)\r\n        self.findTripButton.clicked.connect(self.gotofindtrip)\r\n        self.returnButton.clicked.connect(self.returnPrevScreen)\r\n\r\n    def returnPrevScreen(self):\r\n        widget.removeWidget(self)\r\n\r\n    def gotobooktrip(self):\r\n        bookTrip = ShowAllTrips()\r\n        widget.addWidget(bookTrip)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n    def gotocanceltrip(self):\r\n        cancelTrip = CancelTripScreen()\r\n        widget.addWidget(cancelTrip)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n    def gotoupdateInfo(self):\r\n        updateInfo = UpdateUserScreen()\r\n        widget.addWidget(updateInfo)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n    def gotofindtrip(self):\r\n        findTrip = FindTripScreen()\r\n        widget.addWidget(findTrip)\r\n        widget.setCurrentIndex(widget.currentIndex() + 1)\r\n\r\n\r\n# main\r\nif __name__ == \"__main__\":\r\n    app = QApplication(sys.argv)\r\n    app.setApplicationName(\"Ticket Trackr\")\r\n    app.setWindowIcon(QIcon(\"img/icon.png\"))\r\n    # splash screen\r\n    splash = SplashScreen()\r\n    # main window\r\n    main = MainScreen()\r\n    widget = QtWidgets.QStackedWidget()\r\n    widget.addWidget(main)\r\n    widget.setFixedWidth(800)\r\n    widget.setFixedHeight(840)\r\n    widget.show()\r\n    splash.finish(widget)\r\n    # run app\r\n    app.exec_()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 8243151dd862c01a16b85c93faad83af5cbdaab0)
+++ b/app.py	(date 1684762808896)
@@ -603,6 +603,7 @@
         intValidator = QtGui.QIntValidator()
         txtRegex = QRegExp("[a-zA-Z]+")
         stringValidator = QRegExpValidator(txtRegex)
+        self.seatCountInput.textChanged.connect(self.updateTotalPrice)
 
     def clearSelected(self):
         # reset the selected train data to none
@@ -621,13 +622,14 @@
         self.startDateLabel.setText(selectedTrip.start_date)
         self.endDateLabel.setText(selectedTrip.end_date)
         self.totalPriceLabel.setText(str(selectedTrip.price))
-    #     self.seatCountInput.textChanged.connect(self.updateTotalPrice)
-    # def updateTotalPrice(self):
-    #     numofseats = self.seatCountInput.text()
-    #     if len(numofseats) == 0:
-    #         self.totalPriceLabel.setText("0")
-    #     else:
-    #         self.totalPriceLabel.setText(str(int(numofseats) * int(selectedTrip.price)))
+
+    def updateTotalPrice(self):
+        numofseats = self.seatCountInput.text()
+        if len(numofseats) == 0:
+            self.totalPriceLabel.setText("0")
+        else:
+            self.totalPriceLabel.setText(str(int(numofseats) * int(selectedTrip.price)))
+            
     def showMessageBox(self):
         msg = QMessageBox()
         msg.setWindowTitle("Success Booking!")
